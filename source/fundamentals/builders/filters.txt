================
Filters Builders
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _filters-builders:

Overview 
--------
In this guide, we show you how to use **builders** to specify
**filters** for your queries:

- :ref:`Comparison <comparison>`
- :ref:`Logical <logical>`
- :ref:`Arrays <arrays>`
- :ref:`Elements <elements>`
- :ref:`Evaluation <evaluation>`
- :ref:`Bitwise <bitwise>`
- :ref:`Geospatial <geospatial>`

Filters are the operations MongoDB uses to limit your results to what
you want to see. Some examples of results from filters are: 

- Items that cost $0 to $25
- A hotel with ammenities you want
- A food critic review that mentions "spicy" 

The :java-core-api:`Filters <com/mongodb/client/model/Filters.html>`
class provides static factory methods for all the MongoDB query
operators. Each method returns an instance of the :ref:`Bson <bson>`
type, which you can pass to any method that expects a query filter. 

.. tip::

   For brevity, you may choose to import the methods of the ``Filters`` class statically:

   .. code-block:: java

      import static com.mongodb.client.model.Filters.*;

   The examples below assume this static import.

The following examples show you how to use the static factory methods
provided by the ``Filters`` class to sort your queries. 

The examples use these sample collections that contains the following
documents: 

``paint_purchaces``

.. code-block:: json

   {"_id": 1, "color": "red", "qty": 5, "vendor": ["A"]}
   {"_id": 2, "color": "purple", "qty": 10, "vendor": ["C", "D"]}
   {"_id": 3, "color": "blue", "qty": 8, "vendor": ["B", "A"]}
   {"_id": 4, "color": "white", "qty": 6, "vendor": ["D"]}
   {"_id": 5, "color": "yellow", "qty": 11, "vendor": ["A", "B"]}
   {"_id": 6, "color": "pink", "qty": 5, "vendor": ["C"]}
   {"_id": 7, "color": "green", "qty": 8,"vendor": ["B", "C"]}
   {"_id": 8, "color": "orange", "qty": 7, "vendor": ["A", "D"]}

``binary_numbers``

.. code-block:: json

   { _id: 9, a: 54, binaryValue: "00110110" }
   { _id: 10, a: 20, binaryValue: "00010100" }
   { _id: 11, a: 68, binaryValue: "1000100" }
   { _id: 12, a: 102, binaryValue: "01100110" }

``geo_points``

.. code-block:: json

   { _id: 13, type: "Point", coordinates: [ 2,2 ] }
   { _id: 14, type: "Point", coordinates: [ 5,6 ] }
   { _id: 15, type: "Point", coordinates: [ 1,3 ] }
   { _id: 16, type: "Point", coordinates: [ 4,7 ] }

.. _comparison:

Comparison 
----------

The comparison operator methods include:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Comparison Operator
     - Matches
      
   * - ``eq()``
     - values that are equal to a specified value.

   * - ``gt()``
     - values that are greater than a specified value.
      
   * - ``gte()``
     - values that are greater than or equal to a specified value.

   * - ``lt()``
     - values that are less than a specified value.

   * - ``lte()``
     - values that are less than or equal to a specified value.

   * - ``ne()``
     - values that are not equal to a specified value.

   * - ``in()``
     - any of the values specified in an array.

   * - ``nin()``
     - none of the values specified in an array.

   * - ``empty()``
     - all the documents.


The following code snippet shows how to use a comparison filter:

.. code-block:: java
   
   import static com.mongodb.client.model.Filters.*;

   // <MongoCollection setup code here>

   collection.find(<comparison filter>);

.. example::

   The following example creates a filter that selects all documents where
   the value of the ``qty`` field equals ``5`` in the paint_purchaces collection:

   .. code-block:: java
      
      import static com.mongodb.client.model.Filters.eq;

      // <MongoCollection setup code here>

      Bson equalComparison = eq("qty", 5);
      List<Document> results = new ArrayList<>();
      collection.find(equalComparison).into(results);
      for (Document result : results) {
         System.out.println(result.toJson());
      }
   
   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      {
         "qty": 20
      }

   The output of the above code snippet should look something like this:

   .. code-block:: json
      :copyable: false
   
      {"_id": 1, "color": "red", "qty": 5, "vendor": ["A"]}
      {"_id": 6, "color": "pink", "qty": 5, "vendor": ["C"]}

.. example::

   The following example creates a filter that selects all documents in
   the paint_purchaces collection because the predicate is empty: 

   .. code-block:: java
      
      import static com.mongodb.client.model.Filters.empty

      // <MongoCollection setup code here>

      Bson emptyComparison = empty();
      List<Document> results = new ArrayList<>();
      collection.find(emptyComparison).into(results);
      for (Document result : results) {
         System.out.println(result.toJson());
      }
   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      { }

   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false
      
      {"_id": 1, "color": "red", "qty": 5, "vendor": ["A"]}
      {"_id": 2, "color": "purple", "qty": 10, "vendor": ["C", "D"]}
      {"_id": 3, "color": "blue", "qty": 8, "vendor": ["B", "A"]}
      {"_id": 4, "color": "white", "qty": 6, "vendor": ["D"]}
      {"_id": 5, "color": "yellow", "qty": 11, "vendor": ["A", "B"]}
      {"_id": 6, "color": "pink", "qty": 5, "vendor": ["C"]}
      {"_id": 7, "color": "green", "qty": 8,"vendor": ["B", "C"]}
      {"_id": 8, "color": "orange", "qty": 7, "vendor": ["A", "D"]}

.. _logical:

Logical
-------

The logical operator methods include:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Logical Operator
     - 
      
   * - ``and()``
     - Joins filters with a logical AND and selects documents that match the conditions of both filters.

   * - ``or()``
     - Joins filters with a logical OR and selects documents that match the conditions of either filters.
      
   * - ``not()``
     - Inverts the effect of a query expression and selects documents that do not match the filter.
     
   * - ``nor()``
     - Joins filters with a logical NOR and selects documents that fail to match both filters.

The following code snippet shows how to use a logical filter:

.. code-block:: java
   
   import static com.mongodb.client.model.Filters.*;

   // <MongoCollection setup code here>

   collection.find(<logical filter>);

.. example::

   The following example creates a filter that selects documents where
   the value of the ``qty`` field is greater than ``8`` or the value
   of the ``color`` field equals ``"pink"`` in the paint_purchaces collection: 

   .. code-block:: java
      
      import static com.mongodb.client.model.Filters.or;
      import static com.mongodb.client.model.Filters.eq;
      import static com.mongodb.client.model.Filters.gt;

      // <MongoCollection setup code here>

      Bson orComparison = or(gt("qty", 8), equal("color", "pink"));
      List<Document> results = new ArrayList<>();
      collection.find(orComparison).into(results);
      for (Document result : results) {
         System.out.println(result.toJson());
      }
   
   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      { 
         "$or" :
         [
            "qty" : { "$gt" : 8 }, 
            "color" : "pink"
         ]
          
      }


   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false
      
      {"_id": 2, "color": "purple", "qty": 10, "vendor": ["C", "D"]}
      {"_id": 5, "color": "yellow", "qty": 11, "vendor": ["A", "B"]}
      {"_id": 6, "color": "pink", "qty": 5, "vendor": ["C"]}


.. _arrays:

Arrays
------

The array operator methods include:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Array Operator
     - 
      
   * - ``all()``
     - Matches arrays that contain all elements specified in the query.

   * - ``elemMatch()``
     - Selects documents if element in the array field matches all the specified $elemMatch conditions.
      
   * - ``size()``
     - Selects documents if the array field is a specified size.

The following code snippet shows how to use an array filter:

.. code-block:: java
   
   import static com.mongodb.client.model.Filters.*;

   // <MongoCollection setup code here>

   collection.find(<array filter>);

.. example::

   The following example selects documents with a ``vendors`` array
   containing both ``"A"`` and ``"D"`` in the paint_purchaces collection: 

   .. code-block:: java
      
      import static com.mongodb.client.model.Filters.all;

      // <MongoCollection setup code here>

      Bson allComparison = all("vendors", "A", "D");
      List<Document> results = new ArrayList<>();
      collection.find(allComparison).into(results);
      for (Document result : results) {
         System.out.println(result.toJson());
      }
   
   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      { 
         "vendor" : { 
            "$all" :
               { 
                  ["A", "D"] 
               }
         }
      }

   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false
      
      {"_id": 8, "color": "orange", "qty": 7, "vendor": ["A", "D"]}

.. _elements:

Elements
--------

The elements operator methods include:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Elements Operator
     - Selects
      
   * - ``exists()``
     - documents that have the specified field.

   * - ``type()``
     - Sdocuments if a field is of the specified type.

The following code snippet shows how to use an elements filter:

.. code-block:: java
   
   import static com.mongodb.client.model.Filters.*;

   // <MongoCollection setup code here>

   collection.find(<elements filter>);

.. example::

   The following example selects documents that have a ``qty`` field and
   its value does not equal ``5`` or ``8`` in the paint_purchaces collection:

   .. code-block:: java
      
      import static com.mongodb.client.model.Filters.exists;
      import static com.mongodb.client.model.Filters.nin;
      import static com.mongodb.client.model.Filters.and;
      // <MongoCollection setup code here>

      Bson existsComparison = and(exists("qty"), nin("qty", 5, 8));
      List<Document> results = new ArrayList<>();
      collection.find(existsComparison).into(results);
      for (Document result : results) {
         System.out.println(result.toJson());
      }

   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      {
         "qty" :
         [
            { "$exists" : true,
            { "$nin" : [5, 8] }
         ]
      }

   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false
      
      {"_id": 2, "color": "purple", "qty": 10, "vendor": ["C", "D"]}
      {"_id": 4, "color": "white", "qty": 6, "vendor": ["D"]}
      {"_id": 5, "color": "yellow", "qty": 11, "vendor": ["A", "B"]}
      {"_id": 8, "color": "orange", "qty": 7, "vendor": ["A", "D"]}



.. _evaluation:

Evaluation
----------

An ``evaluation`` filter to match documemts with an expression.

The evaluation operator methods include:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Evaluation Operator
     - 
      
   * - ``mod()``
     - Performs a modulo operation on the value of a field and selects documents with a specified result.

   * - ``regex()``
     - Selects documents where values match a specified regular expression.
      
   * - ``text()``
     - Selects documemts matching a full-text search expression.
     
   * - ``where()``
     - Matches documents that satisfy a JavaScript expression.

The following code snippet shows how to use an evaluation filter:

.. code-block:: java
   
   import static com.mongodb.client.model.Filters.*;

   // <MongoCollection setup code here>

   collection.find(<evaluation filter>);

.. example::

   The following example selects documents that have a ``color`` field
   containing the term ``green`` in the paint_purchaces collection:

   .. code-block:: java
      
      import static com.mongodb.client.model.Filters.text;

      // <MongoCollection setup code here>

      Bson textComparison = text("green");
      List<Document> results = new ArrayList<>();
      collection.find(textComparison).into(results);
      for (Document result : results) {
         System.out.println(result.toJson());
      }

   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      { 
         "text" : "green"
      }

   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false
      
      {"_id": 7, "color": "green", "qty": 8,"vendor": ["B", "C"]}

   Available with MongoDB 3.2, a version 3 text index allows case-sensitive
   and diacritic-sensitive searches.

   .. code-block:: java

      text("green", TextSearchOptions().caseSensitive(true))

   .. code-block:: java

      text("green", TextSearchOptions().diacriticSensitive(true))

.. _bitwise:

Bitwise
-------

The bitwise query operators include:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Logical Operator
     - Selects documents where
      
   * - ``bitsAllSet()``
     - the specified bits of a field are set (i.e. 1).

   * - ``bitsAllClear()``
     - the specified bits of a field are clear (i.e. 0).
      
   * - ``bitsAnySet()``
     - at least one of the specified bits of a field are set (i.e. 1).
     
   * - ``bitsAnyClear()``
     - at least one of the specified bits of a field are clear (i.e. 0).

The following code snippet shows how to use a bitwise filter:

.. code-block:: java
   
   import static com.mongodb.client.model.Filters.*;

   // <MongoCollection setup code here>

   collection.find(<bitwise filter>);

.. example::

   The following example selects documents that have a bitField field
   with bits set at positions of the corresponding bitmask 50 (i.e.
   00110010) in the binary_numbers collection: 

   .. code-block:: java
      
      import static com.mongodb.client.model.Filters.bitsAllSet;

      // <MongoCollection setup code here>

      Bson bitsComparison = bitsAllSet(1, 5);
      List<Document> results = new ArrayList<>();
      collection.find(bitsComparison).into(results);
      for (Document result : results) {
         System.out.println(result.toJson());
      }

   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      { 
         "a": 
            { 
               "$bitsAllSet": [ 1, 5 ] 
            } 
      }

   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false
      
      { _id: 9, a: 54, binaryValue: "00110110" }
      { _id: 12, a: 102, binaryValue: "01100110" }

.. _geospatial:

Geospatial
----------

The geospatial operator methods include:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Comparison Operator
     - Matches
      
   * - ``geoWithin()``
     - Selects documents containing a GeoJSON geometry field that falls within within a bounding GeoJSON geometry.

   * - ``geoWithinBox()``
     - Selects documents containing a grid coordinates field that exist within the specified box.
      
   * - ``geoWithinPolygon()``
     - Selects documents containing a grid coordinates field that exist within the specified polygon.

   * - ``geoWithinCenter()``
     - Selects documents containing a grid coordinates field that exist within the specified circle.

   * - ``geoWithinCenterSphere()``
     - Selects geometries containing a geospatial data field (GeoJSON or legacy coordinate pairs) that exist within the specified circle, using spherical geometry.

   * - ``geoIntersects()``
     - Selects geometries that intersect with a GeoJSON geometry. The 2dsphere index supports $geoIntersects.

   * - ``near()``
     - Returns geospatial objects in proximity to a point. Requires a geospatial index. The 2dsphere and 2d indexes support $near.

   * - ``nearSphere()``
     - Returns geospatial objects in proximity to a point on a sphere. Requires a geospatial index. The 2dsphere and 2d indexes support $nearSphere.

The following code snippet shows how to use a geospatial filter:

.. code-block:: java
   
   import static com.mongodb.client.model.Filters.*;

   // <MongoCollection setup code here>

   collection.find(<geospatial filter>);

.. example::

   TThe following example creates a filter that selects documents where the
   ``point`` field contains a GeoJSON Geometry object that falls within the
   given polygon in the geo_points collection:

   .. code-block:: java
      
      import static com.mongodb.client.model.Filters.geoWithin;

      // <MongoCollection setup code here>

      Polygon square = new Polygon(Arrays.asList(new Position(0, 0), 
                                            new Position(4, 0), 
                                            new Position(4, 4), 
                                            new Position(0, 4),
                                            new Position(0, 0)));
   
      Bson geoWithinComparison = geoWithin("point", square));
      collection.find(geoWithinComparison);
      List<Document> results = new ArrayList<>();
      collection.find(bitsComparison).into(results);
      for (Document result : results) {
         System.out.println(result.toJson());
      }

   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      {
         "point": {
            $geoWithin: {
               $geometry: {
                  type: "Polygon",
                  coordinates: [ [ [ 0, 0 ], [ 4 , 0 ], [ 4, 4 ], [ 0, 4 ], [0 , 0] ] ]
               }
            }
         }
      }

   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false

      { _id: 13, type: "Point", coordinates: [ 2,2 ] }
      { _id: 15, type: "Point", coordinates: [ 1,3 ] }

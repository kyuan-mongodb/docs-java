================
Filters Builders
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _filters-builders:

Overview 
--------
In this guide, we show you how to use **builders** to specify
**filters** for your queries.

Builders are classes provided by the MongoDB Java driver that allow you
to use the builder pattern to interact with your MongoDB instance. The
:doc:`builders </fundamentals/builders/>` provided by the MongoDB Java
driver can improve the readability of your code. 

Filters are the operations MongoDB uses to limit your results to what
you want to see. Some examples of results from filters are: 

- Items that cost $0 to $25
- A hotel with amenities that include an indoor swimming pool and free parking
- A food critic review that mentions "spicy" 

This guide shows you how to use builders with examples of the operators: 

- :ref:`Comparison <comparison>`
- :ref:`Logical <logical>`
- :ref:`Arrays <arrays>`
- :ref:`Elements <elements>`
- :ref:`Evaluation <evaluation>`
- :ref:`Bitwise <bitwise>`
- :ref:`Geospatial <geospatial>`

The :java-core-api:`Filters <com/mongodb/client/model/Filters.html>`
class provides static factory methods for all the MongoDB query
operators. Each method returns an instance of the :ref:`Bson <bson>`
type, which you can pass to any method that expects a query filter. 

.. tip::

   For brevity, you may choose to import all methods of the
   :java-core-api:`Filters <com/mongodb/client/model/Filters.html>`
   class statically: 

   .. code-block:: java

      import static com.mongodb.client.model.Filters.*;

   The examples below assume this static import.

The following sections show you how to use the ``Filters`` class to sort
your queries using the following setup:

.. literalinclude:: /includes/fundamentals/code-snippets/Filters.java
   :language: java
   :dedent:
   :start-after: begin imports
   :end-before: end imports 

The Filter examples in this guide use the following sample collections:

``paint_purchases``

.. code-block:: json

   {"_id": 1, "color": "red", "qty": 5, "vendor": ["A"]}
   {"_id": 2, "color": "purple", "qty": 10, "vendor": ["C", "D"]}
   {"_id": 3, "color": "blue", "qty": 8, "vendor": ["B", "A"]}
   {"_id": 4, "color": "white", "qty": 6, "vendor": ["D"]}
   {"_id": 5, "color": "yellow", "qty": 11, "vendor": ["A", "B"]}
   {"_id": 6, "color": "pink", "qty": 5, "vendor": ["C"]}
   {"_id": 7, "color": "green", "qty": 8,"vendor": ["B", "C"]}
   {"_id": 8, "color": "orange", "qty": 7, "vendor": ["A", "D"]}

``binary_numbers``

.. code-block:: json

   { _id: 9, a: 54, binaryValue: "00110110" }
   { _id: 10, a: 20, binaryValue: "00010100" }
   { _id: 11, a: 68, binaryValue: "1000100" }
   { _id: 12, a: 102, binaryValue: "01100110" }

``geo_points``

.. code-block:: json

   { _id: 13, "coordinates": { type: "Point", coordinates: [ 2.0, 2.0 ] } }
   { _id: 14, "coordinates": { type: "Point", coordinates: [ 5.0, 6.0 ] } }
   { _id: 15, "coordinates": { type: "Point", coordinates: [ 1.0, 3.0 ] } }
   { _id: 16, "coordinates": { type: "Point", coordinates: [ 4.0, 7.0 ] } }

.. _comparison:

Comparison 
----------

The comparison operator methods include:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Comparison Method
     - Matches
      
   * - ``eq()``
     - values that are equal to a specified value.

   * - ``gt()``
     - values that are greater than a specified value.
      
   * - ``gte()``
     - values that are greater than or equal to a specified value.

   * - ``lt()``
     - values that are less than a specified value.

   * - ``lte()``
     - values that are less than or equal to a specified value.

   * - ``ne()``
     - values that are not equal to a specified value.

   * - ``in()``
     - any of the values specified in an array.

   * - ``nin()``
     - none of the values specified in an array.

   * - ``empty()``
     - all the documents.

The following example creates a filter that matches all documents where
the value of the ``qty`` field equals "5" in the ``paint_purchases`` collection:

.. literalinclude:: /includes/fundamentals/code-snippets/Filters.java
   :language: java
   :dedent:
   :start-after: begin equalComparison
   :end-before: end equalComparison
   
The BSON renders as:

.. code-block:: json
   :copyable: false
   
   { "$eq": { "qty": 5 } }

The output of the above code snippet should look something like this:

.. code-block:: json
   :copyable: false
   
   {"_id": 1, "color": "red", "qty": 5, "vendor": ["A"]}
   {"_id": 6, "color": "pink", "qty": 5, "vendor": ["C"]}

The following example creates a filter that matches all documents where
the value of the ``qty`` field is greater than or qual to "8" in the
``paint_purchases`` collection: 

.. literalinclude:: /includes/fundamentals/code-snippets/Filters.java
   :language: java
   :dedent:
   :start-after: begin gteComparison
   :end-before: end gteComparison
   
The BSON renders as:

.. code-block:: json
   :copyable: false
   
   { "$gte": { "qty": 8 } }

The output of the above code snippet should look something like this:

.. code-block:: json
   :copyable: false
   
   {"_id": 2, "color": "purple", "qty": 10, "vendor": ["C", "D"]}
   {"_id": 3, "color": "blue", "qty": 8, "vendor": ["B", "A"]}
   {"_id": 5, "color": "yellow", "qty": 11, "vendor": ["A", "B"]}
   {"_id": 7, "color": "green", "qty": 8, "vendor": ["B", "C"]}

The following example creates a filter that matches all documents in
the ``paint_purchases`` collection because the predicate is empty: 

.. literalinclude:: /includes/fundamentals/code-snippets/Filters.java
   :language: java
   :dedent:
   :start-after: begin emptyComparison
   :end-before: end emptyComparison

The BSON renders as:

.. code-block:: json
   :copyable: false
   
   { }

The output of the above code snippet should look something like this:
   
.. code-block:: json
   :copyable: false
      
   {"_id": 1, "color": "red", "qty": 5, "vendor": ["A"]}
   {"_id": 2, "color": "purple", "qty": 10, "vendor": ["C", "D"]}
   {"_id": 3, "color": "blue", "qty": 8, "vendor": ["B", "A"]}
   {"_id": 4, "color": "white", "qty": 6, "vendor": ["D"]}
   {"_id": 5, "color": "yellow", "qty": 11, "vendor": ["A", "B"]}
   {"_id": 6, "color": "pink", "qty": 5, "vendor": ["C"]}
   {"_id": 7, "color": "green", "qty": 8,"vendor": ["B", "C"]}
   {"_id": 8, "color": "orange", "qty": 7, "vendor": ["A", "D"]}

.. _logical:

Logical
-------

The logical operator methods include:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Logical Method
     - Matches
      
   * - ``and()``
     - documents with the conditions of both filters and joins filters with a logical ``AND``.

   * - ``or()``
     - documents with the conditions of either filter and joins filters with a logical ``OR``.
      
   * - ``not()``
     - documents that do not match the filter.
     
   * - ``nor()``
     - documents that fail to match both filters and joins filters with a logical ``NOR``.

The following example creates a filter that matches documents where
the value of the ``qty`` field is greater than "8" or the value
of the ``color`` field equals "pink" in the ``paint_purchases`` collection: 

.. literalinclude:: /includes/fundamentals/code-snippets/Filters.java
   :language: java
   :dedent:
   :start-after: begin orComparison
   :end-before: end orComparison
   
The BSON renders as:

.. code-block:: json
   :copyable: false
   
   { 
      "$or" :
      [
         "qty" : { "$gt" : 8 }, 
         "color" : "pink"
      ]       
   }


The output of the above code snippet should look something like this:
   
.. code-block:: json
   :copyable: false
      
   {"_id": 2, "color": "purple", "qty": 10, "vendor": ["C", "D"]}
   {"_id": 5, "color": "yellow", "qty": 11, "vendor": ["A", "B"]}
   {"_id": 6, "color": "pink", "qty": 5, "vendor": ["C"]}


.. _arrays:

Arrays
------

The array operator methods include:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Array Method
     - Matches
      
   * - ``all()``
     - arrays that contain all elements specified in the query.

   * - ``elemMatch()``
     - documents if element in the array field matches all the specified $elemMatch conditions.
      
   * - ``size()``
     - documents if the array field is a specified size.

The following example matches documents with a ``vendors`` array
containing both "A" and "D" in the ``paint_purchases`` collection: 

.. literalinclude:: /includes/fundamentals/code-snippets/Filters.java
   :language: java
   :dedent:
   :start-after: begin allComparison
   :end-before: end allComparison
   
The BSON renders as:

.. code-block:: json
   :copyable: false
   
   { 
     "vendor" : { 
         "$all" :
            { 
               ["A", "D"] 
            }
      }
   }

The output of the above code snippet should look something like this:
   
.. code-block:: json
   :copyable: false
      
   {"_id": 8, "color": "orange", "qty": 7, "vendor": ["A", "D"]}

.. _elements:

Elements
--------

The elements operator methods include:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Elements Method
     - Matches
      
   * - ``exists()``
     - documents that have the specified field.

   * - ``type()``
     - documents if a field is of the specified type.

The following example matches documents that have a ``qty`` field and
its value does not equal "5" or "8" in the ``paint_purchases`` collection:

.. literalinclude:: /includes/fundamentals/code-snippets/Filters.java
   :language: java
   :dedent:
   :start-after: begin existsComparison
   :end-before: end existsComparison

The BSON renders as:

.. code-block:: json
   :copyable: false
   
   {
      "qty" :
      [
         { "$exists" : true,
         { "$nin" : [5, 8] }
      ]
   }

The output of the above code snippet should look something like this:
   
.. code-block:: json
   :copyable: false
      
   {"_id": 2, "color": "purple", "qty": 10, "vendor": ["C", "D"]}
   {"_id": 4, "color": "white", "qty": 6, "vendor": ["D"]}
   {"_id": 5, "color": "yellow", "qty": 11, "vendor": ["A", "B"]}
   {"_id": 8, "color": "orange", "qty": 7, "vendor": ["A", "D"]}



.. _evaluation:

Evaluation
----------

An ``evaluation`` filter to match documemts with an expression.

The evaluation operator methods include:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Evaluation Method
     - Matches
      
   * - ``mod()``
     - documents where a modulo operation on the value of a field contain a specified result.

   * - ``regex()``
     - documents where values contain a specified regular expression.
      
   * - ``text()``
     - documents which contain a specified full-text search expression.
     
   * - ``where()``
     - documents which contain a specified JavaScript expression.

The following example matches documents that have a ``color`` field
containing the letter "p" in the ``paint_purchases`` collection:

.. literalinclude:: /includes/fundamentals/code-snippets/Filters.java
   :language: java
   :dedent:
   :start-after: begin regexComparison
   :end-before: end regexComparison

The BSON renders as:

.. code-block:: json
   :copyable: false
   
   { "$regex" : "p" }

The output of the above code snippet should look something like this:
   
.. code-block:: json
   :copyable: false
      
   {"_id": 2, "color": "purple", "qty": 10, "vendor": ["C", "D"]}
   {"_id": 6, "color": "pink", "qty": 5, "vendor": ["C"]}


.. _bitwise:

Bitwise
-------

The bitwise operator methods include:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Bitwise Method
     - Matches
      
   * - ``bitsAllSet()``
     - documents when the specified bits of a field are set (i.e. 1).

   * - ``bitsAllClear()``
     - documents when the specified bits of a field are clear (i.e. 0).
      
   * - ``bitsAnySet()``
     - documents when at least one of the specified bits of a field are set (i.e. 1).
     
   * - ``bitsAnyClear()``
     - documents when at least one of the specified bits of a field are clear (i.e. 0).

The following example matches documents that have a bitField field
with bits set at positions of the corresponding bitmask 50 (i.e.
00110010) in the ``binary_numbers`` collection: 

.. literalinclude:: /includes/fundamentals/code-snippets/Filters.java
   :language: java
   :dedent:
   :start-after: begin bitsComparison
   :end-before: end bitsComparison

The BSON renders as:

.. code-block:: json
      :copyable: false
   
   { 
      "a": 
         { 
            "$bitsAllSet": [ 1, 5 ] 
         } 
   }

The output of the above code snippet should look something like this:
   
.. code-block:: json
   :copyable: false
      
   { _id: 9, a: 54, binaryValue: "00110110" }
   { _id: 12, a: 102, binaryValue: "01100110" }

.. _geospatial:

Geospatial
----------

The geospatial operator methods include:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Geospatial Method 
     - Matches
      
   * - ``geoWithin()``
     - documents containing a GeoJSON geometry field that falls within within a bounding GeoJSON geometry.

   * - ``geoWithinBox()``
     - documents containing a grid coordinates field that exist within the specified box.
      
   * - ``geoWithinPolygon()``
     - documents containing a grid coordinates field that exist within the specified polygon.

   * - ``geoWithinCenter()``
     - documents containing a grid coordinates field that exist within the specified circle.

   * - ``geoWithinCenterSphere()``
     - geometries containing a geospatial data field (GeoJSON or legacy coordinate pairs) that exist within the specified circle, using spherical geometry.

   * - ``geoIntersects()``
     - geometries that intersect with a GeoJSON geometry. The 2dsphere index supports $geoIntersects.

   * - ``near()``
     - geospatial objects in proximity to a point. Requires a geospatial index. The 2dsphere and 2d indexes support $near.

   * - ``nearSphere()``
     - geospatial objects in proximity to a point on a sphere. Requires a geospatial index. The 2dsphere and 2d indexes support $nearSphere.


The following example creates a filter that matches documents in which
the ``point`` field contains a GeoJSON Geometry object that falls within
the given polygon in the ``geo_points`` collection:

.. literalinclude:: /includes/fundamentals/code-snippets/Filters.java
   :language: java
   :dedent:
   :start-after: begin geoWithinComparison
   :end-before: end geoWithinComparison

The BSON renders as:

.. code-block:: json
      :copyable: false
   
   {
      "point": {
         $geoWithin: {
            $geometry: {
               type: "Polygon",
               coordinates: [ [ [ 0, 0 ], [ 4 , 0 ], [ 4, 4 ], [ 0, 4 ], [0 , 0] ] ]
            }
         }
      }
   }

The output of the above code snippet should look something like this:
   
.. code-block:: json
   :copyable: false

   { _id: 13, type: "Point", coordinates: [ 2.0, 2.0 ] }
   { _id: 15, type: "Point", coordinates: [ 1.0, 3.0 ] }

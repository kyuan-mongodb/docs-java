================
Filters Builders
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _filters-builders:

Overview 
--------

The :java-core-api:`Filters <com/mongodb/client/model/Filters.html>`
class providesstatic factory methods for all the MongoDB query
operators. Each method returns an instance of the Bson type, which
can in turn be passed to any method that expects a query filter.

.. tip::

   For brevity, you may choose to import the methods of the ``Filters`` class statically:

   .. code-block:: java

      import static com.mongodb.client.model.Filters.*;

   The examples below assume this static import.

Comparison 
----------
Use the ``comparison`` method to match values.

The comparison operator methods include:

- ``eq``: Matches values that are equal to a specified value. 
- ``gt``: Matches values that are greater than a specified value.
- ``gte``: Matches values that are greater than or equal to a specified value.
- ``lt``: Matches values that are less than a specified value.
- ``lte``: Matches values that are less than or equal to a specified value.
- ``ne``: Matches values that are not equal to a specified value. 
- ``in``: Matches any of the values specified in an array.
- ``nin``: Matches none of the values specified in an array.
- ``empty``: Matches all the documents.

The following example creates a filter that selects all documents where
the value of the ``qty`` field equals ``20``:

.. code-block:: java

   `eq`("qty", 20)
   equal("qty", 20)

which will render as:

.. code-block:: none
   :copyable: false
   
   { 
    "qty" : 20 
   }

.. note::

   ``eq`` and ``neq`` are reserved words.  ``eq`` is aliased to
   ``equal`` and ``ne`` is aliased to ``notEqual``

The following example creates a filter that selects all documents where
the value of the ``qty`` field is either ``5`` or ``15``:

.. code-block:: java

   in("qty", 5, 15)

The following example creates a filter that selects all documents
because the predicate is empty:

.. code-block:: java

   empty()

which will render as:

.. code-block:: none
   :copyable: false
   
   {}

Logical
-------
Use ``logical`` operators to perform join or invert filters.

The logical operator methods include:

- ``and``: Joins filters with a logical AND and selects documents that match the conditions of both filters.
- ``or``: Joins filters with a logical OR and selects documents that match the conditions of either filters.
- ``not``: Inverts the effect of a query expression and selects documents that do not match the filter.
- ``nor``: Joins filters with a logical NOR and selects documents that fail to match both filters.

The following example creates a filter that selects documents where the
value of the ``qty`` field is greater than ``20`` and the value of the
``user`` field equals ``"jdoe"``:

.. code-block:: java

   and(gt("qty", 20), equal("user", "jdoe"))

which will render as:

.. code-block:: none
   :copyable: false
   
   { 
    "qty" : { "$gt" : 20 }, 
    "user" : "jdoe" 
   }

The following example creates a filter that selects documents where the
``price`` field value equals ``0.99`` or ``1.99``; and the ``sale``
field value is equal to ``true`` or the ``qty`` field value is less than
``20``:

.. code-block:: java
   
   and(or(equal("price", 0.99), equal("price", 1.99) or(equal("sale", true), lt("qty", 20)))


which will render as:

.. code-block:: none
   :copyable: false
   
   { 
   "$and" : 
    [
      { "$or" : [ { "price" : 0.99 }, { "price" : 1.99 } ] },
      { "$or" : [ { "sale" : true }, { "qty" : { "$lt" : 20 } } ] }
    ]
   }

Arrays
------
Use ``array`` operators to filter on an array field.

The array operator methods include:

- ``all``: Matches arrays that contain all elements specified in the query.
- ``elemMatch``: Selects documents if element in the array field matches all the specified $elemMatch conditions.
- ``size``: Selects documents if the array field is a specified size.

The following example selects documents with a ``tags`` array containing
both ``"ssl"`` and ``"security"``:

.. code-block:: java

   all("tags", "ssl", "security")

Elements
--------
Use ``elements`` operators to filter on a field.

The elements operator methods include:

- ``exists``: Selects documents that have the specified field.
- ``type``: Selects documents if a field is of the specified type.

.. note::

   ``type`` is a reserved word.  ``type`` is aliased to ``bsonType``.

The following example selects documents that have a ``qty`` field and
its value does not equal ``5`` or ``15``:

.. code-block:: java

   and(exists("qty"), nin("qty", 5, 15))

Evaluation
----------
Use ``evaluation`` to match documemts with an expression.

The evaluation operator methods include:

- ``mod``: Performs a modulo operation on the value of a field and selects documents with a specified result.
- ``regex``: Selects documents where values match a specified regular expression.
- ``text``: Selects documemts matching a full-text search expression.
- ``where``: Matches documents that satisfy a JavaScript expression.

The following example assumes a collection that has a text index in the
field ``abstract``. It selects documents that have a ``abstract`` field
containing the term ``coffee``:

.. code-block:: java

   text("coffee")

Available with MongoDB 3.2, a version 3 text index allows case-sensitive
and diacritic-sensitive searches.

.. code-block:: java

   text("coffee", TextSearchOptions().caseSensitive(true))

.. code-block:: java

   text("coffee", TextSearchOptions().diacriticSensitive(true))

Bitwise
-------
Use ``bitwise`` operators to filter fields on a bit-level.

The bitwise query operators include:

- ``bitsAllSet``: Selects documents where the specified bits of a field are set (i.e. 1).
- ``bitsAllClear``: Selects documents where the specified bits of a field are clear (i.e. 0).
- ``bitsAnySet``: Selects documents where at least one of the specified bits of a field are set (i.e. 1).
- ``bitsAnyClear``: Selects documents where at least one of the specified bits of a field are clear (i.e. 0).

The following example selects documents that have a ``bitField`` field
with bits set at positions of the corresponding bitmask ``50`` (i.e.
``00110010``):

.. code-block:: java

   bitsAllSet("bitField", 50)

Geospatial
----------
Use ``geospatial`` operators to 

The geospatial operator methods include:

- ``geoWithin``: Selects documents containing a GeoJSON geometry field that falls within within a bounding GeoJSON geometry.
- ``geoWithinBox``: Selects documents containing a grid coordinates field that exist within the specified box.
- ``geoWithinPolygon``: Selects documents containing a grid coordinates field that exist within the specified polygon.
- ``geoWithinCenter``: Selects documents containing a grid coordinates field that exist within the specified circle.
- ``geoWithinCenterSphere``: Selects geometries containing a geospatial data field (GeoJSON or legacy coordinate pairs) that exist within the specified circle, using spherical geometry.
- ``geoIntersects``: Selects geometries that intersect with a GeoJSON geometry. The 2dsphere index supports $geoIntersects.
- ``near``: Returns geospatial objects in proximity to a point. Requires a geospatial index. The 2dsphere and 2d indexes support $near.
- ``nearSphere``: Returns geospatial objects in proximity to a point on a sphere. Requires a geospatial index. The 2dsphere and 2d indexes support $nearSphere.

The following example creates a filter that selects documents where the
``geo`` field contains a GeoJSON Geometry object that falls within the
given polygon:

.. code-block:: java

   val polygon: Polygon = Polygon(Seq(Position(0, 0), Position(4, 0),
                                       Position(4, 4), Position(0, 4),
                                       Position(0, 0)))
   geoWithin("geo", polygon)

The following example creates a filter that selects documents where the
``geo`` field contains a GeoJSON Geometry object that intersects the
given Point:

.. code-block:: java

   geoIntersects("geo", Point(Position(4, 0)))

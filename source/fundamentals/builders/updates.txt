================
Updates Builders
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _updates-builders:

Overview 
--------
In this guide, we show you how to use **builders** to specify
**updates** for your queries:

- :ref:`Field Updates <field_updates>`
- :ref:`Array Updates <array_updates>`
- :ref:`Combining Multiple Update Operators <multiple_updates>`

The :java-core-api:`Updates <com/mongodb/client/model/Updates.html>`
class provides static factory methods for all the MongoDB query
operators. Each method returns an instance of the :ref:`Bson <bson>`
type, which can in turn be passed to any method that expects a query
filter.

.. tip::

   For brevity, you may choose to import the methods of the ``Filters`` class statically:

   .. code-block:: java

      import static com.mongodb.client.model.Updates.*;

   The examples below assume this static import.

The following examples show you how to use the static factory methods
provided by the ``Updates`` class to sort your queries. 

Each section uses the update filter in this way:

.. code-block:: java

   import static com.mongodb.client.model.Updates.*;

   // <MongoCollection setup code here>

   collection.find(<update filter>);

The examples the following document: 

.. code-block:: json

   {"_id": 1, "color": "red", "qty": 5, "vendor": ["A", "D", "M"], lastModified: ISODate("2021-04-03T01:11:18.965Z")}

.. _field_updates:

Field Updates
-------------
The following section describes update operators that apply to the value of an entire field.

Set
~~~
The ``$set`` operator sets the value of a field to to the specified
value. 

.. example::

   The following example sets the value of the ``qty`` field to ``11``: 

   .. code-block:: java
      
      import static com.mongodb.client.model.Updates.set;

      // <MongoCollection setup code here>

      Bson setUpdate = set("qty", 11);
      collection.find(setUpdate);
   
   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      { 
         "$set": 
         {
            "qty" : 11
         }
      }

   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false
      
      {"_id": 1, "color": "red", "qty": 11, "vendor": ["A", "D", "M"], lastModified: ISODate("2021-04-03T01:11:18.965Z")}

Unset
~~~~~
The ``$unset`` operator deletes the field with the given name.

.. example::

   The following example deletes the ``qty`` field:

   .. code-block:: java
      
      import static com.mongodb.client.model.Updates.unset;

      // <MongoCollection setup code here>

      Bson unsetUpdate = unset("qty");
      collection.find(unsetUpdate);
   
   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      { 
         "$unset": 
         {
            "qty" : true
         }
      }

   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false
      
      {"_id": 1, "color": "red", "vendor": ["A", "D", "M"], lastModified: ISODate("2021-04-03T01:11:18.965Z")}

Set On Insert
~~~~~~~~~~~~~
The ``$setOnInsert`` operator sets the value of a field to the given
value if the update is an upsert that results in an insert of a
document. 

.. example::

   TThe following example sets the value of the ``qty`` field to ``5``
   if an upsert resulted in the insert of a document: 

   .. code-block:: java
      
      import static com.mongodb.client.model.Updates.setOnInsert;

      // <MongoCollection setup code here>

      Bson setOnInsertUpdate = setOnInsert("qty", 5);
      collection.find(setOnInsertUpdate);
   
   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      { 
         "$setOnInsert": 
         {
            "qty" : 5
         }
      }

   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false
      
      {"_id": 1, "color": "red", "qty": 5, "vendor": ["A", "D", "M"], lastModified: ISODate("2021-04-03T01:11:18.965Z")}

Increment
~~~~~~~~~
The ``$inc`` operator increments the value of a numeric field by a
specified value. 

.. example::

   The following example increments the value of the ``qty`` field by
   ``3``: 

   .. code-block:: java
      
      import static com.mongodb.client.model.Updates.inc;

      // <MongoCollection setup code here>

      Bson incUpdate = inc("qty", 3);
      collection.find(incUpdate);
   
   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      { 
         "$inc": 
         {
            "qty" : 3
         }
      }

   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false
      
      {"_id": 1, "color": "red", "qty": 8, "vendor": ["A", "D", "M"], lastModified: ISODate("2021-04-03T01:11:18.965Z")}

Multiply
~~~~~~~~
The ``$mul`` operator multiplies the value of a numeric field by a
specified value. 

.. example::

   The following example multiplies the value of the ``qty`` field by
   ``2``: 

   .. code-block:: java
      
      import static com.mongodb.client.model.Updates.mul;

      // <MongoCollection setup code here>

      Bson mulUpdate = mul("qty", 2);
      collection.find(mulUpdate);
   
   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      { 
         "$mul": 
         {
            "qty" : 2
         }
      }

   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false
      
      {"_id": 1, "color": "red", "qty": 10, "vendor": ["A", "D", "M"], lastModified: ISODate("2021-04-03T01:11:18.965Z")}

Rename
~~~~~~
The ``$rename`` operator renames a field.

.. example::

   The following example renames the ``qty`` field to ``quantity``:

   .. code-block:: java
      
      import static com.mongodb.client.model.Updates.rename;

      // <MongoCollection setup code here>

      Bson renameUpdate = rename("qty", "quantity");
      collection.find(renameUpdate);
   
   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      { 
         "$rename": 
         {
            "qty" : "quantity"
         }
      }

   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false
      
      {"_id": 1, "color": "red", "quantity": 5, "vendor": ["A", "D", "M"], lastModified: ISODate("2021-04-03T01:11:18.965Z")}

Min
~~~
The ``$min`` operator updates the value of the field to a specified
value if the specified value is less than the current value of the
field. 

.. example::

   The following example sets the value of the ``qty`` field to the
   minimum of its current value and ``8``: 

   .. code-block:: java
      
      import static com.mongodb.client.model.Updates.min;

      // <MongoCollection setup code here>

      Bson minUpdate = min("qty", 8);
      collection.find(minUpdate);
   
   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      { 
         "$min": 
         {
            "qty" : 8
         }
      }

   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false
      
      {"_id": 1, "color": "red", "qty": 5, "vendor": ["A", "D", "M"], lastModified: ISODate("2021-04-03T01:11:18.965Z")}

Max
~~~
The ``$max`` operator updates the value of the field to a specified
value if the specified value is greater than the current value of the
field. 

.. example::

   The following example sets the value of the ``qty`` field to the
   maximum of its current value and ``8``: 

   .. code-block:: java
      
      import static com.mongodb.client.model.Updates.max;

      // <MongoCollection setup code here>

      Bson maxUpdate = max("qty", 8);
      collection.find(maxUpdate);
   
   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      { 
         "$max": 
         {
            "qty" : 8
         }
      }

   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false
      
      {"_id": 1, "color": "red", "qty": 8, "vendor": ["A", "D", "M"], lastModified: ISODate("2021-04-03T01:11:18.965Z")}

Current Date
~~~~~~~~~~~~
The ``$currentDate`` operator sets the value of the field with the
specified name to the current date as a BSON `date
<http://docs.mongodb.org/manual/reference/bson-types/#document-bson-type-date>`_
or as a BSON `timestamp
<http://docs.mongodb.org/manual/reference/bson-types/#document-bson-type-timestamp>`_.

.. example::

   The following example sets the value of the ``lastModified`` field to
   the current date as a BSON date type:

   .. code-block:: java
      
      import static com.mongodb.client.model.Updates.currentDate;

      // <MongoCollection setup code here>

      Bson currentDateUpdate = currentDate("lastModified");
      collection.find(currentDateUpdate);
   
   The Bson renders as:

   .. code-block:: none
      :copyable: false

      { 
         "$currentDate": 
         {
            "lastModified" : "$$NOW"
         }
      }

   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false
      
      {"_id": 1, "color": "red", "qty": 5, "vendor": ["A", "D", "M"], lastModified: ISODate("2021-05-03T10:57:18.965Z")}
   

Bit
~~~
The ``$bit`` operator performs a bitwise update of the integral value of a field.

.. example::

   The following example performs a bitwise AND between the number
   ``10`` and the integral value of the ``qty`` field: 

   .. code-block:: java
      
      import static com.mongodb.client.model.Updates.bitwiseOr;

      // <MongoCollection setup code here>

      Bson bitwiseOrUpdate = bitwiseOr("qty", 10);
      collection.find(bitwiseOrUpdate);
   
   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      { 
         "$bitwiseOr": 
         {
            "$qty" : 10
         }
      }
   
   The bitwise operation results in 15:

   .. code-block:: none
      :copyable: false
      
      0101
      1010
      ----
      1111

   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false
      
      {"_id": 1, "color": "red", "qty": 15, "vendor": ["A", "D", "M"], lastModified: ISODate("2021-04-03T01:11:18.965Z")}

.. _array_updates:

Array Updates
-------------
The following section describes update operators that apply to the contents of the array value of a field.

Add to Set
~~~~~~~~~~
The ``$addToSet`` operator adds a value to an array if the value is not already present.

.. example::

   The following example adds the value ``"C"`` to the array value of
   the ``vendor`` field: 

   .. code-block:: java
      
      import static com.mongodb.client.model.Updates.addToSet;

      // <MongoCollection setup code here>

      Bson addToSetUpdate = addToSet("vendor", "C");
      collection.find(addToSetUpdate);
   
   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      { 
         "$addToSet": 
         {
            "vendor" : "C"
         }
      }

   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false
      
      {"_id": 1, "color": "red", "qty": 5, "vendor": ["A", "D", "M", "C"], lastModified: ISODate("2021-04-03T01:11:18.965Z")}
      

Pop
~~~
The ``$pop`` update operator removes the first or last element of an array.

.. example::

   The following example pops the first element off of the array value
   of the ``vendor`` field:  

   .. code-block:: java
      
      import static com.mongodb.client.model.Updates.popFirst;

      // <MongoCollection setup code here>

      Bson popFirstUpdate = popFirst("vendor");
      collection.find(popFirstUpdate);
   
   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      { 
         "$pop": 
         {
            "vendor" : -1
         }
      }

   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false
      
      {"_id": 1, "color": "red", "qty": 5, "vendor": ["D", "M"],
      lastModified: ISODate("2021-04-03T01:11:18.965Z")}
      
   .. note:

   You can also pop the last element off using :
      .. code-block:: java
      
         popLast("vendor")

Pull All
~~~~~~~~
The ``$pullAll`` update operator removes all instances of the specified values from an existing array.

.. example::

   The following example removes vendor ``"A"`` and ``"M"`` from the
   vendor array: 

   .. code-block:: java
      
      import static com.mongodb.client.model.Updates.pullAll;

      // <MongoCollection setup code here>

      Bson pullAllUpdate = pullAll("vendor", Arrays.asList("A", "M"));
      collection.find(pullAllUpdate);
   
   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      { 
         "$pullAll": 
         {
            "vendor" : ["A", "M"]
         }
      }

   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false
      
      {"_id": 1, "color": "red", "qty": 5, "vendor": ["D"],
      lastModified: ISODate("2021-04-03T01:11:18.965Z")}

Pull
~~~~
The ``$pull`` update operator removes from an existing array all instances of a value or values that match a specified query.

.. example::

   The following example removes the value ``"D"`` from the ``vendor``
   array: 

   .. code-block:: java
      
      import static com.mongodb.client.model.Updates.pull;

      // <MongoCollection setup code here>

      Bson pullUpdate = pull("vendor", "D");
      collection.find(pullUpdate);
   
   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      { 
         "$pull": 
         {
            "vendor" : "D"
         }
      }

   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false
      
      {"_id": 1, "color": "red", "qty": 5, "vendor": ["A", "M"],
      lastModified: ISODate("2021-04-03T01:11:18.965Z")}

Push
~~~~
The ``$push`` update operator appends a specified value to an array.

.. example::

   The following examples pushes ``"C"`` to the ``vendor`` array:

   .. code-block:: java
      
      import static com.mongodb.client.model.Updates.push;

      // <MongoCollection setup code here>

      Bson pushUpdate = push("vendor", "C");
      collection.find(pushUpdate);
   
   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      { 
         "$push": 
         {
            "vendor" : "C"
         }
      }

   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false
      
      {"_id": 1, "color": "red", "qty": 5, "vendor": ["A", "D", "M", "C"],
      lastModified: ISODate("2021-04-03T01:11:18.965Z")}

.. _multiple_updates:

Combining Multiple Update Operators
-----------------------------------
An application can atomically update multiple fields of a single
document by combining two or more of the update operators described
above. 

.. example::

   This example increments the value of the ``qty`` field by ``6``, sets
   the value of the ``color`` field to ``purple``, and pushes ``"R"`` to
   the ``vendor`` field:

   .. code-block:: java
      
      import static com.mongodb.client.model.Updates.combine;
      import static com.mongodb.client.model.Updates.set;
      import static com.mongodb.client.model.Updates.inc;
      import static com.mongodb.client.model.Updates.push;

      // <MongoCollection setup code here>

      Bson combineUpdate = combine(set("color", "purple"), inc("qty", 6), push("vendor", "R");
      collection.find(combineUpdate);
   
   The Bson renders as:

   .. code-block:: none
      :copyable: false
   
      { 
        "$set": { "color" : "purple" }, 
        "$inc": { "qty" : "6" }, 
        "$push": { "vendor" : "R" }
      }

   The output of the above code snippet should look something like this:
   
   .. code-block:: json
      :copyable: false
      
      {"_id": 1, "color": "purple", "qty": 11, "vendor": ["A", "D", "M", "R"],
      lastModified: ISODate("2021-04-03T01:11:18.965Z")}

================
Updates Builders
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _updates-builders:

Overview 
--------
In this guide, we show you how to use **builders** to specify
**updates** for your queries:

- :ref:`Field Updates <field_updates>`
- :ref:`Array Updates <array_updates>`
- :ref:`Combining Multiple Update Operators <multiple_updates>`

The :java-core-api:`Updates <com/mongodb/client/model/Updates.html>`
class provides static factory methods for all the MongoDB query
operators. Each method returns an instance of the :ref:`Bson <bson>`
type, which you can pass to any method that expects a query filter.

.. tip::

   For brevity, you may choose to import the methods of the ``Updates`` class statically:

   .. code-block:: java

      import static com.mongodb.client.model.Updates.*;

   The examples below assume this static import.

The following examples show you how to use the static factory methods
provided by the ``Updates`` class to sort your queries and the following
setup:

.. literalinclude:: /includes/fundamentals/code-snippets/Updates.java
   :language: java
   :dedent:
   :start-after: begin imports
   :end-before: end imports

The examples on this page use the following document: 

.. code-block:: json

   {
       "_id": 1, 
       "color": "red", 
       "qty": 5, 
       "vendor": ["A", "D", "M"], 
       "lastModified" = Fri Mar 05 00:00:00 EST 2021
   }

.. _field_updates:

Field Updates
-------------
The following section describes update operators that apply to the value of an entire field.

Set
~~~
The ``set()`` method sets the value of a field to the specified value. 

The following example sets the value of the ``qty`` field to ``11``: 

.. literalinclude:: /includes/fundamentals/code-snippets/Updates.java
   :language: java
   :dedent:
   :start-after: begin setUpdate
   :end-before: end setUpdate

The Bson renders as:

.. code-block:: none
   :copyable: false

   { 
      "$set": 
      {
         "qty" : 11
      }
   }

The previous example produces output similar to the following:

.. code-block:: json
   :copyable: false

   {
      "_id": 1, 
      "color": "red", 
      "qty": 11, 
      "vendor": ["A", "D", "M"], 
      "lastModified" = Fri Mar 05 00:00:00 EST 2021
   }

Unset
~~~~~
The ``unset()`` method deletes the field with the given name.


The following example deletes the ``qty`` field:

.. literalinclude:: /includes/fundamentals/code-snippets/Updates.java
   :language: java
   :dedent:
   :start-after: begin unsetUpdate
   :end-before: end unsetUpdate
   
The Bson renders as:

.. code-block:: none
   :copyable: false
   
   { 
      "$unset": 
      {
         "qty" : true
      }
   }

The previous example produces output similar to the following:
   
.. code-block:: json
   :copyable: false
      
   {
      "_id": 1, 
      "color": "red", 
      "vendor": ["A", "D", "M"], 
      "lastModified" = Fri Mar 05 00:00:00 EST 2021
   }

Set On Insert
~~~~~~~~~~~~~
The ``setOnInsert()`` method sets the value of a field to the given
value if the update is an upsert that results in an insert of a
document. 

The following example sets the value of the ``qty`` field to ``5``
if an upsert resulted in the insert of a document: 

.. literalinclude:: /includes/fundamentals/code-snippets/Updates.java
   :language: java
   :dedent:
   :start-after: begin setOnInsertUpdate
   :end-before: end setOnInsertUpdate
   
The Bson renders as:

.. code-block:: none
   :copyable: false
   
   { 
      "$setOnInsert": 
      {
         "qty" : 5
      }
   }

The previous example produces output similar to the following:
   
.. code-block:: json
   :copyable: false
      
   {
      "_id": 1, 
      "color": "red", 
      "qty": 5, 
      "vendor": ["A", "D", "M"], 
      "lastModified" = Fri Mar 05 00:00:00 EST 2021
   }

Increment
~~~~~~~~~
The ``inc()`` method increments the value of a numeric field by a
specified value. 

The following example increments the value of the ``qty`` field by
``3``: 

.. literalinclude:: /includes/fundamentals/code-snippets/Updates.java
   :language: java
   :dedent:
   :start-after: begin incUpdate
   :end-before: end incUpdate
   
The Bson renders as:

.. code-block:: none
   :copyable: false
   
   { 
      "$inc": 
      {
         "qty" : 3         
      }
   }

The previous example produces output similar to the following:
   
.. code-block:: json
   :copyable: false
      
   {
      "_id": 1, 
      "color": "red", 
      "qty": 8, 
      "vendor": ["A", "D", "M"],
      "lastModified" = Fri Mar 05 00:00:00 EST 2021
   }

Multiply
~~~~~~~~
The ``mul()`` method multiplies the value of a numeric field by a
specified value. 

The following example multiplies the value of the ``qty`` field by
   ``2``: 

.. literalinclude:: /includes/fundamentals/code-snippets/Updates.java
   :language: java
   :dedent:
   :start-after: begin mulUpdate
   :end-before: end mulUpdate
   
The Bson renders as:

.. code-block:: none
   :copyable: false
   
   { 
      "$mul": 
      {
         "qty" : 2
      }
   }

The previous example produces output similar to the following:
   
.. code-block:: json
   :copyable: false
      
   {
      "_id": 1, 
      "color": "red", 
      "qty": 10, 
      "vendor": ["A", "D", "M"],
      "lastModified" = Fri Mar 05 00:00:00 EST 2021 
   }

Rename
~~~~~~
The ``rename()`` method renames a field.

The following example renames the ``qty`` field to ``quantity``:

.. literalinclude:: /includes/fundamentals/code-snippets/Updates.java
   :language: java
   :dedent:
   :start-after: begin renameUpdate
   :end-before: end renameUpdate
   
The Bson renders as:

.. code-block:: none
   :copyable: false
   
   { 
      "$rename": 
      {
         "qty" : "quantity"
      }
   }

The previous example produces output similar to the following:
   
.. code-block:: json
   :copyable: false
      
   {
      "_id": 1,
      "color": "red", "
      vendor": ["A", "D", "M"],
      "lastModified" = Fri Mar 05 00:00:00 EST 2021, 
      "quantity": 5
   }

Min
~~~
The ``min()`` method updates the value of the field to a specified
value if the specified value is less than the current value of the
field. 

.. literalinclude:: /includes/fundamentals/code-snippets/Updates.java
   :language: java
   :dedent:
   :start-after: begin minUpdate
   :end-before: end minUpdate
   
The Bson renders as:

.. code-block:: none
   :copyable: false
   
   { 
      "$min": 
      {
         "qty" : 2
      }
   }

The previous example produces output similar to the following:
   
.. code-block:: json
   :copyable: false
      
   {
      "_id": 1, 
      "color": "red", 
      qty": 2, 
      "vendor": ["A", "D", "M"], 
      "lastModified" = Fri Mar 05 00:00:00 EST 2021
   }

Max
~~~
The ``max()`` method updates the value of the field to a specified
value if the specified value is greater than the current value of the
field. 

.. literalinclude:: /includes/fundamentals/code-snippets/Updates.java
   :language: java
   :dedent:
   :start-after: begin maxUpdate
   :end-before: end maxUpdate

The following example sets the value of the ``qty`` field to the
maximum of its current value and ``8``: 

   
The Bson renders as:

.. code-block:: none
  :copyable: false
   
   { 
      "$max": 
      {
         "qty" : 8
      }
   }

The previous example produces output similar to the following:
   
.. code-block:: json
  :copyable: false
      
   {
      "_id": 1, 
      "color": "red", 
      "qty": 8, 
      "vendor": ["A", "D", "M"],
      "lastModified" = Fri Mar 05 00:00:00 EST 2021
   }

Current Date
~~~~~~~~~~~~
The ``currentDate()`` method sets the value of the field with the
specified name to the current date as a BSON `date
<http://docs.mongodb.org/manual/reference/bson-types/#document-bson-type-date>`_
or as a BSON `timestamp
<http://docs.mongodb.org/manual/reference/bson-types/#document-bson-type-timestamp>`_.

The following example sets the value of the ``lastModified`` field to
the current date as a BSON date type:

.. literalinclude:: /includes/fundamentals/code-snippets/Updates.java
   :language: java
   :dedent:
   :start-after: begin currentDateUpdate
   :end-before: end currentDateUpdate

The Bson renders as:

.. code-block:: none
   :copyable: false

   { 
      "$currentDate": 
      {
         "lastModified" : "$$NOW"
      }
   }

The previous example produces output similar to the following:
   
.. code-block:: json
  :copyable: false
      
   {
      "_id": 1, 
      "color": "red", 
      "qty": 5, 
      "vendor": ["A", "D", "M"],
      "lastModified" = Fri Mar 05 15:33:54 EST 2021
   }
   

Bit
~~~
The ``bit()`` method performs a bitwise update of the integral value of a field.

The following example performs a bitwise AND between the number
``10`` and the integral value of the ``qty`` field: 

.. literalinclude:: /includes/fundamentals/code-snippets/Updates.java
   :language: java
   :dedent:
   :start-after: begin bitwiseOrUpdate
   :end-before: end bitwiseOrUpdate
   
The Bson renders as:

.. code-block:: none
   :copyable: false
   
   { 
      "$bitwiseOr": 
      {
         "$qty" : 10
      }
   }
   
The bitwise operation results in 15:

.. code-block:: none
   :copyable: false
   
   0101
   1010
   ----
   1111

The previous example produces output similar to the following:

.. code-block:: json
   :copyable: false
      
   {
      "_id": 1, 
      "color": "red", 
      "qty": 15,
      "vendor": ["A", "D", "M"],
      "lastModified" = Fri Mar 05 00:00:00 EST 2021
   }

.. _array_updates:

Array Updates
-------------
The following section describes update operators that apply to the contents of the array value of a field.

Add to Set
~~~~~~~~~~
The ``addToSet()`` method adds a value to an array if the value is not already present.

The following example adds the value ``"C"`` to the array value of
the ``vendor`` field: 

.. literalinclude:: /includes/fundamentals/code-snippets/Updates.java
   :language: java
   :dedent:
   :start-after: begin addToSetUpdate
   :end-before: end addToSetUpdate

The Bson renders as:

.. code-block:: none
   :copyable: false
   
   { 
      "$addToSet": 
      {
         "vendor" : "C"
      }
   }

The previous example produces output similar to the following:
   
.. code-block:: json
   :copyable: false
      
   {
      "_id": 1, 
      "color": "red", 
      "qty": 5, 
      "vendor": ["A", "D", "M", "C"],
      "lastModified" = Fri Mar 05 00:00:00 EST 2021
   }
      

Pop
~~~
The ``pop()`` method removes the first or last element of an array.

The following example pops the first element off of the array value
of the ``vendor`` field:  

.. literalinclude:: /includes/fundamentals/code-snippets/Updates.java
   :language: java
   :dedent:
   :start-after: begin popFirstUpdate
   :end-before: end popFirstUpdate

The Bson renders as:

.. code-block:: none
  :copyable: false
   
   { 
      "$pop": 
      {
         "vendor" : -1
      }
   }

The previous example produces output similar to the following:
   
.. code-block:: json
   :copyable: false
      
   {
      "_id": 1, 
      "color": "red", 
      "qty": 5, 
      "vendor": ["D", "M"],
      "lastModified" = Fri Mar 05 00:00:00 EST 2021
   }
      
   .. note:

   You can also pop the last element off using :
      .. code-block:: java
      
         popLast("vendor")

Pull All
~~~~~~~~
The ``pullAll()`` method removes all instances of the specified values from an existing array.

The following example removes vendor ``"A"`` and ``"M"`` from the
vendor array: 

.. literalinclude:: /includes/fundamentals/code-snippets/Updates.java
   :language: java
   :dedent:
   :start-after: begin pullAllUpdate
   :end-before: end pullAllUpdate
   
The Bson renders as:

.. code-block:: none
   :copyable: false
   
   { 
      "$pullAll": 
      {
         "vendor" : ["A", "M"]
      }
   }

The previous example produces output similar to the following:
   
.. code-block:: json
  :copyable: false
      
   {
      "_id": 1, 
      "color": "red", 
      "qty": 5, 
      "vendor": ["D"],
      "lastModified" = Fri Mar 05 00:00:00 EST 2021
   }

Pull
~~~~
The ``pull()`` method removes from an existing array all instances of a value or values that match a specified query.

The following example removes the value ``"D"`` from the ``vendor``
array: 

.. literalinclude:: /includes/fundamentals/code-snippets/Updates.java
   :language: java
   :dedent:
   :start-after: begin pullUpdate
   :end-before: end pullUpdate

The Bson renders as:

.. code-block:: none
  :copyable: false
   
   { 
      "$pull": 
      {
         "vendor" : "D"
      }
   }

The previous example produces output similar to the following:
   
.. code-block:: json
  :copyable: false
      
   {
      "_id": 1, 
      "color": "red", 
      "qty": 5, 
      "vendor": ["A", "M"],
      "lastModified" = Fri Mar 05 00:00:00 EST 2021
   }

Push
~~~~
The ``push()`` method appends a specified value to an array.

The following examples pushes ``"C"`` to the ``vendor`` array:

.. literalinclude:: /includes/fundamentals/code-snippets/Updates.java
   :language: java
   :dedent:
   :start-after: begin pushUpdate
   :end-before: end pushUpdate
   
The Bson renders as:

.. code-block:: none
   :copyable: false
   
   { 
     "$push": 
      {
         "vendor" : "C"
      }
   }

The previous example produces output similar to the following:

.. code-block:: json
   :copyable: false
      
   {
      "_id": 1, 
      "color": "red", 
      "qty": 5, 
      "vendor": ["A", "D", "M", "C"],
      "lastModified" = Fri Mar 05 00:00:00 EST 2021
   }

.. _multiple_updates:

Combining Multiple Update Operators
-----------------------------------
An application can atomically update multiple fields of a single
document by combining two or more of the update operators described
above. 

This example increments the value of the ``qty`` field by ``6``, sets
the value of the ``color`` field to ``purple``, and pushes ``"R"`` to
the ``vendor`` field:

.. literalinclude:: /includes/fundamentals/code-snippets/Updates.java
   :language: java
   :dedent:
   :start-after: begin combineUpdate
   :end-before: end combineUpdate
   
The Bson renders as:

.. code-block:: none
   :copyable: false
   
   { 
     "$set": { "color" : "purple" }, 
     "$inc": { "qty" : "6" }, 
     "$push": { "vendor" : "R" }
   }

The previous example produces output similar to the following:
   
.. code-block:: json
   :copyable: false
      
   {
      "_id": 1, 
      "color": "purple", 
      "qty": 11, 
      "vendor": ["A", "D", "M", "R"],
      "lastModified" = Fri Mar 05 00:00:00 EST 2021
   }
